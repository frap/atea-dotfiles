#!/usr/bin/env bash
set -o errexit
set -o nounset

[[ ! -z "${DEBUG:-}" ]]  && set -x

#readonly PROGNAME=$(basename $0)
#readonly PROGDIR=$(readlink -n $(dirname $0))
#readonly ARGS="$@"
#Figure out where the script is running
#__SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"
DOTFILES="${DOTFILES:-~/.local/dotfiles}"
#LS=ls

cmdline="${1:-check}"

function set_logging() {
    export logfile=/tmp/$(basename $0).log
    # Redirect stderr
    exec 2>&1
    # Redirect stdout ( > ) into a named pipe ( >() ) running "tee"
    exec > >(tee -i $logfile)
}

# Include the robust-bash functions
source "${DOTFILES}"/bin/gasbash-lib.sh

get_oracledb_ver() {
    local XE11pattern='11.2.0/xe'
    local XE18pattern='18c'
    local oracle_env=/etc/profile.d/oracle_env.sh
    SID="${SID:-}"
    local oracle_db=""

    if is_file $oracle_env; then
        source $oracle_env
        if matches_regex ${ORACLE_HOME} ${XE18pattern} ; then
            SID="xepdb1";
            oracle_db="18.4 XE";
        else
            SID='XE';
            oracle_db="11.2 XE"
        fi
        echo $oracle_db

    else
        e_error "No oracle DB installed"
    fi

}

get_tomcat_ver() {
    local dir=/opt/tomcat_latest

    if is_link $dir  ; then
        tomcat_ver=$($LS -las $dir | cut -d'>' -f2 | cut -d'-' -f3)
    else
        ## "No tomcat directory $dir"
        tomcat_ver="n/a"
    fi
    echo $tomcat_ver
}

get_apex_ver() {
    local oracle_env=/etc/profile.d/oracle_env.sh
    local sqldir="/opt/sql/bin"
    local sql="$sqldir/sql"
    local host=$(hostname -s)
    is_file $oracle_env && source $oracle_env
    SID="${SID:-}"
    if is_not_dir $sqldir; then
        sql="${ORACLE_HOME}/bin/sqlplus"
    fi
    local apex_ver=""

    apex_ver=$(echo -n | echo "SELECT comp_name, version, status FROM dba_registry WHERE comp_id='APEX';" \
        | $sql sys/${syspwd}@localhost:1521/${SID} as sysdba | gawk '/VALID/ { print $4}' )
    echo $apex_ver
}

get_ords_ver() {
    local ords_jar="/opt/tomcat_latest/webapps/apex.war"

    if file_exists $ords_jar; then
        ords_ver=$(sudo java -jar $ords_jar version | cut -d" " -f5)
    else
        ords_ver="n/a"
    fi
    echo $ords_ver
}

get_oraclelinux_ver() {
    local oracle_rel=/etc/oracle-release
    local linux_ver=""

    if is_file $oracle_rel; then
        linux_ver=$(cat $oracle_rel | cut -d" " -f5)
        echo $linux_ver
    else
        e_error "Not an Oracle linux TSP Numb nuts!"
    fi

}

read_oracle_sys_passwd() {
    echo ""
    e_line "###############################################"
    e_arrow " Please provide the Oracle DB SYS password ##"
    e_line "###############################################"
    read -s syspwd
    #clear
    # return value from function
    export syspwd
}


check() {
    set_logging
    olinux_ver=$(get_oraclelinux_ver)
    tomcat_ver=$(get_tomcat_ver)
    oracle_db=$(get_oracledb_ver)
    if ! matches_regex $oracle_db "No oracle DB install"; then
        read_oracle_sys_passwd
        apex_ver=$(get_apex_ver)
        ords_ver=$(get_ords_ver)
    fi
    e_line "------------------------------------------------------"
    e_arrow "Oracle Linux version    : $olinux_ver"
    e_arrow "Tomcat version          : $tomcat_ver"
    e_arrow "Oracle Database version : $oracle_db"
    if ! matches_regex $oracle_db "No oracle DB install"; then
        e_arrow "Oracle APEX version     : $apex_ver"
        e_arrow "Oracle ORDs version     : $ords_ver"
    fi
    e_line "------------------------------------------------------"
}

(return 0 2>/dev/null) && sourced=1 || sourced=0
# Dont run the script if it is sourced
#[[ "${BASH_SOURCE[0]}" != "${0}" ]] && $cmdline
[[ $sourced == 0 ]] && $cmdline
return 0
