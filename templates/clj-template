#!/bin/bash
#_(
   #_DEPS is same format as deps.edn. Multiline is okay.
   DEPS='{:deps {
                 clj-time {:mvn/version "0.14.2"}
                }}'

   #_You can put other options here
   OPTS='-J-Xms256m -J-Xmx256m -J-client'

   exec clojure $OPTS -Sdeps "$DEPS" "$0" "$@"
)
;; Written by Eric Normand and published here:
;; https://gist.github.com/ericnormand/6bb4562c4bc578ef223182e3bb1e72c5
;; Clojure code goes here ....

(require '[clojure.java.io :as io]
         '[clojure.java.shell :as sh]
         '[clojure.edn :as edn]
         '[clojure.string :as str]
         '[clojure.pprint :as pp]
         '[clojure.java.browse]
         '[clojure.java.javadoc])

(defn err-msg [fmt-str & args]
  (binding [*out* *err*]
    (apply clojure.core/printf fmt-str args)
    (flush)))

(defn die [fmt-str & args]
  (apply err-msg fmt-str args)
  (System/exit 1))

(println "*agent*=" *agent*)
(println "*allow-unresolved-vars*=" *allow-unresolved-vars*)
(println "*assert*=" *assert*)
(println "*clojure-version*=" *clojure-version*)
(println "*command-line-args*=" *command-line-args*)
(println "*compile-files*=" *compile-files*)
(println "*compile-path*=" *compile-path*)
(println "*compiler-options*=" *compiler-options*)
(println "*data-readers*=" *data-readers*)
(println "*default-data-reader-fn*=" *default-data-reader-fn*)
(println "*err*=" *err*)
(println "*file*=" *file*)
(println "*flush-on-newline*=" *flush-on-newline*)
(println "*fn-loader*=" *fn-loader*)
(println "*in*=" *in*)
(println "*math-context*=" *math-context*)
(println "*ns*=" *ns*)
(println "*out*=" *out*)
(println "*print-dup*=" *print-dup*)
(println "*print-length*=" *print-length*)
(println "*print-level*=" *print-level*)
(println "*print-meta*=" *print-meta*)
(println "*print-namespace-maps*=" *print-namespace-maps*)
(println "*print-readably*=" *print-readably*)
(println "*read-eval*=" *read-eval*)
(println "*reader-resolver*=" *reader-resolver*)
(println "*source-path*=" *source-path*)
(println "*suppress-read*=" *suppress-read*)
(println "*unchecked-math*=" *unchecked-math*)
(println "*use-context-classloader*=" *use-context-classloader*)
(println "*verbose-defrecords*=" *verbose-defrecords*)
(println "*warn-on-reflection*=" *warn-on-reflection*)
(println "clojure.core.server/*session*=" clojure.core.server/*session*)
(println "clojure.java.browse/*open-url-script*=" clojure.java.browse/*open-url-script*)
(when (instance? clojure.lang.Atom clojure.java.browse/*open-url-script*)
  (println "@clojure.java.browse/*open-url-script*=" @clojure.java.browse/*open-url-script*))
(println "clojure.java.javadoc/*core-java-api*=" clojure.java.javadoc/*core-java-api*)
(println "clojure.java.javadoc/*feeling-lucky*=" clojure.java.javadoc/*feeling-lucky*)
(println "clojure.java.javadoc/*feeling-lucky-url*=" clojure.java.javadoc/*feeling-lucky-url*)
(println "clojure.java.javadoc/*local-javadocs*=" clojure.java.javadoc/*local-javadocs*)
(when (instance? clojure.lang.Ref clojure.java.javadoc/*local-javadocs*)
  (println "@clojure.java.javadoc/*local-javadocs*=" @clojure.java.javadoc/*local-javadocs*))
(println "clojure.java.javadoc/*remote-javadocs*=" clojure.java.javadoc/*remote-javadocs*)
(when (instance? clojure.lang.Ref clojure.java.javadoc/*remote-javadocs*)
  (println "@clojure.java.javadoc/*remote-javadocs*=" @clojure.java.javadoc/*remote-javadocs*))
(println "clojure.java.shell/*sh-dir*=" clojure.java.shell/*sh-dir*)
(println "clojure.java.shell/*sh-env*=" clojure.java.shell/*sh-env*)
(println "clojure.pprint/*print-base*=" clojure.pprint/*print-base*)
(println "clojure.pprint/*print-miser-width*=" clojure.pprint/*print-miser-width*)
(println "clojure.pprint/*print-pprint-dispatch*=" clojure.pprint/*print-pprint-dispatch*)
(println "clojure.pprint/*print-pretty*=" clojure.pprint/*print-pretty*)
(println "clojure.pprint/*print-radix*=" clojure.pprint/*print-radix*)
(println "clojure.pprint/*print-right-margin*=" clojure.pprint/*print-right-margin*)
(println "clojure.pprint/*print-suppress-namespaces*=" clojure.pprint/*print-suppress-namespaces*)
(println "clojure.spec.alpha/*coll-check-limit*=" clojure.spec.alpha/*coll-check-limit*)
(println "clojure.spec.alpha/*coll-error-limit*=" clojure.spec.alpha/*coll-error-limit*)
(println "clojure.spec.alpha/*compile-asserts*=" clojure.spec.alpha/*compile-asserts*)
(println "clojure.spec.alpha/*explain-out*=" clojure.spec.alpha/*explain-out*)
(println "clojure.spec.alpha/*fspec-iterations*=" clojure.spec.alpha/*fspec-iterations*)
(println "clojure.spec.alpha/*recursion-limit*=" clojure.spec.alpha/*recursion-limit*)

(println)
(println "----------------------------------------")
(println)

(println "The full path name of the file containing this code becomes the\n"
         "value of the Clojure variable *file*:\n"
         *file*)
(println)
(println "The base name of the file containing this code becomes the\n"
         "value of the Clojure variable *source-path*:\n"
         *source-path*)
(println)
(println "Any command line arguments given after the name of this file\n"
         "become the value of the Clojure variable *command-line-args*,\n"
         "which is a list of strings.  It never contains the name of the\n"
         "command, and is an empty list if no arguments are given for the\n"
         "command:")
(pr *command-line-args*)
(println)
(println)

(println "Clojure version:" (clojure-version))
(println "Â¡Hola, Pelotudo!")

;; If you ever call future or clojure.java.shell/sh, this will avoid a
;; 60-second wait when the sript is done, until it exits.
(shutdown-agents)
